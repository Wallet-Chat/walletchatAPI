definitions:
  auth.SigninPayload:
    properties:
      address:
        type: string
      msg:
        type: string
      name:
        type: string
      nonce:
        type: string
      sig:
        type: string
    type: object
  controllers.Attachments:
    properties:
      media_keys:
        items:
          type: string
        type: array
    type: object
  controllers.CommunityMember:
    properties:
      address:
        type: string
      admin:
        type: boolean
      image:
        type: string
      name:
        type: string
    type: object
  controllers.LandingPageItems:
    properties:
      has_messaged:
        description: has user messaged in this group chat before? if not show "Say
          hi" button
        type: boolean
      is_verified:
        description: is this group verified? WalletChat's group is verified by default
        type: boolean
      joined:
        description: number of members of the group
        type: boolean
      logo:
        description: logo url, stored in backend
        type: string
      member_count:
        type: integer
      members:
        items:
          $ref: '#/definitions/controllers.CommunityMember'
        type: array
      messages:
        items:
          $ref: '#/definitions/entity.Groupchatitem'
        type: array
      name:
        type: string
      social:
        items:
          $ref: '#/definitions/controllers.SocialMsg'
        type: array
      tweets:
        description: follow format of GET /get_twitter/{nftAddr}
        items:
          $ref: '#/definitions/controllers.TweetType'
        type: array
    type: object
  controllers.SocialMsg:
    properties:
      type:
        type: string
      username:
        type: string
    type: object
  controllers.TweetType:
    properties:
      attachments:
        properties:
          media_keys:
            items:
              type: string
            type: array
        type: object
      author_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      media:
        $ref: '#/definitions/controllers.Attachments'
      text:
        type: string
      user:
        properties:
          id:
            type: string
          name:
            type: string
          profile_image_url:
            type: string
          username:
            type: string
        type: object
    type: object
  entity.Addrnameitem:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  entity.Addrnamesignupitem:
    properties:
      address:
        description: ADDRESS
        type: string
      domain:
        description: DOMAIN
        type: string
      email:
        description: ADMIN ONLY USAGE
        type: string
      id:
        type: integer
      name:
        description: NAME
        type: string
      signupsite:
        description: SITE USER SIGNED UP FROM
        type: string
    type: object
  entity.Bookmarkitem:
    properties:
      chain:
        type: string
      id:
        type: integer
      nftaddr:
        type: string
      walletaddr:
        type: string
    type: object
  entity.Chatitem:
    properties:
      encrypted_sym_lit_key:
        description: USE IF USING LIT ENCRYPTION
        type: string
      fromaddr:
        description: '*** REQUIRED INPUT ***'
        type: string
      id:
        description: AUTO-GENERATED (PRIMARY KEY)
        type: integer
      lit_access_conditions:
        type: string
      message:
        description: '*** REQUIRED INPUT ***'
        type: string
      nftaddr:
        description: ONLY USED FOR NFT DM CONTEXT
        type: string
      nftid:
        description: ONLY USED FOR NFT DM CONTEXT
        type: string
      read:
        description: DEFAULT FALSE
        type: boolean
      sender_name:
        description: AUTO-SET BY BACKED FOR RETURN VALUE
        type: string
      timestamp:
        description: AUTO-SET BY REST API
        type: string
      timestamp_dtm:
        description: USED FOR SORTING WHEN TIME FORMAT NEEDED
        type: string
      toaddr:
        description: '*** REQUIRED INPUT ***'
        type: string
    required:
    - fromaddr
    - message
    - toaddr
    type: object
  entity.Chatiteminbox:
    description: Used as Return Data Struct Only
    properties:
      chain:
        type: string
      context_type:
        type: string
      encrypted_sym_lit_key:
        description: USE IF USING LIT ENCRYPTION
        type: string
      fromaddr:
        type: string
      id:
        type: integer
      lit_access_conditions:
        type: string
      logo:
        type: string
      message:
        type: string
      name:
        type: string
      nftaddr:
        type: string
      nftid:
        type: string
      read:
        type: boolean
      sender_name:
        type: string
      timestamp:
        type: string
      timestamp_dtm:
        type: string
      toaddr:
        type: string
      type:
        type: string
      unread:
        type: integer
    type: object
  entity.Comments:
    properties:
      fromaddr:
        type: string
      id:
        type: integer
      message:
        type: string
      name:
        type: string
      nftaddr:
        type: string
      nftid:
        type: integer
      timestamp:
        type: string
    type: object
  entity.CommunitySocialStruct:
    properties:
      name:
        type: string
      type:
        type: string
    type: object
  entity.Communityaccesscondition:
    properties:
      address:
        type: string
      count:
        type: string
      id:
        type: integer
      slug:
        description: change community to slug in DB table too
        type: string
    type: object
  entity.Createcommunityitem:
    properties:
      id:
        type: integer
      image:
        description: base64
        type: string
      name:
        type: string
      slug:
        type: string
      social:
        items:
          $ref: '#/definitions/entity.CommunitySocialStruct'
        type: array
    type: object
  entity.Groupchatitem:
    properties:
      context_type:
        type: string
      fromaddr:
        type: string
      id:
        type: integer
      message:
        type: string
      nftaddr:
        type: string
      sender_name:
        type: string
      timestamp:
        type: string
      timestamp_dtm:
        type: string
      type:
        type: string
    type: object
  entity.Imageitem:
    properties:
      addr:
        type: string
      base64data:
        type: string
      id:
        type: integer
    type: object
  entity.ImageitemPhoto:
    properties:
      addr:
        type: string
      base64data:
        type: string
      id:
        type: integer
      imageid:
        type: string
    type: object
  entity.Settings:
    properties:
      domain:
        description: DOMAIN
        type: string
      email:
        description: EMAIL ADDRESS TO GET NOTIFICATIONS
        type: string
      id:
        description: AUTO-GENERATED (PRIMARY KEY)
        type: integer
      installedsnap:
        description: IS METAMASK SNAP INSTALLED
        type: string
      notify24:
        description: RECEIVE NOTIFICATION FOR EVERY DM RECEIVED (string value true/false)
        type: string
      notifydm:
        description: RECEIVE DAILY NOTIFICATION SUMMARY EMAIL (string value true/false)
        type: string
      signupsite:
        description: LATEST SITE WHERE NOTIFICATIONS EMAIL WAS ENTERED
        type: string
      telegramcode:
        description: TELEGRAM VERIFICATION CODE - REQUIRES THIS MSG SENT TO WALLETCHAT
          BOT
        type: string
      telegramhandle:
        description: TELEGRAM @ handle - MAINLY USED AS DOUBLE CHECK DURING INITIAL
          SETUP
        type: string
      telegramid:
        description: TELEGRAM CHAT ID - REQUIRES MSG SENT TO WALLETCHAT BOT TO VERIFY
        type: string
      twitterid:
        description: TWITTER USER ID - FUTURE USE IF USER CHANGES NAME?
        type: string
      twitteruser:
        description: TWITTER/X @user
        type: string
      twitterverified:
        description: HAS USER VERIFIED @user with WALLETCHAT (not twitter blue checkmark)
        type: string
      verified:
        description: USER CONFIRMED EMAIL OR NOT (string value true/false)
        type: string
      walletaddr:
        description: '*** REQUIRED INPUT ***'
        type: string
    required:
    - walletaddr
    type: object
info:
  contact:
    email: contact@walletchat.fun
    url: https://walletchat.fun
  description: "To interact with the live API via this page, you will need a valid
    JWT Token, see next section for details.\n\nSome JSON data structures are shared
    for both input/return values.\nRequired input parameters will have a red * in
    the data type outline at\nthe bottom of the page, along with a comment. \nThis
    means when executing API functionality from this API documentation page, some
    fields \ncan be left blank or may be removed from the JSON struct before submitting.\nPlease
    email the developers with any issues.\nSome JSON data structures are output only,
    and will be marked as such.\n\n# JWT Authentication\nExcept for AUTH functions,
    all /v1 endpoints must include `Bearer <JWT>` token (requests showing the Lock
    Icon)\n\nFor this API Doc, use the `Authorize` button on the right hand side to
    enter `Bearer <JWT>` where the JWT will\ncome from the return value of the `/signin`
    endpoint. Please read the `/users/<>/nonce` and `/signin`\ndescriptions to understand
    the login workflow via JWT Auth. \n\nAnother easy way to obtain a JWT for use
    here is to grab it from the web app:\n1) Log into https://app.walletchat.fun,
    with the wallet address desired to act on behalf of\n2) Right click the web page
    and select `inspect`\n3) Go to the `Application` tab\n4) Find local storage, and
    select https://app.walletchat.fun \n5) Select the value of `jwt` or `jwt_*` variable,
    this is your JWT for the signed in wallet\n\n# Encryption\nEthereum based wallets
    (EVM compatible) have encryption for all DMs, using LIT Protocol\n\n# Software
    Stack\n![WC_SW_Stack drawio](https://user-images.githubusercontent.com/19207330/227810284-83324964-58b3-4335-bb7b-0d2128a3d62c.svg)\n\n#
    API Key Holders (Paid Tier)\nADMIN API KEY functions allow vetted customer integrations
    to streamline the user experience, enhancing the integrated sign-in process.\nTo
    authenticate with an API key, the ADMIN_API_KEY must be used in place of the end
    user JWT.\n\n## Important Note for Security \n*We ask API key holders to make
    these requests in a protected manner, mainly from their own API.*\n\nIf the ADMIN
    API key is used in the client browser, it may be misused by malicious actors.
    \n\nBelow are examples of each API which has an ADMIN API Key overrride. `curl`
    is just used as example,\nreplace with equivalent functionality as needed.\n\n##
    Example for <API>/v1/name \nUpdate the wallet address to name mapping:\n\n```\ncurl
    --location 'https://api.v2.walletchat.fun/v1/name' \\\n--header 'Content-Type:
    application/json' \\\n--header 'Authorization: Bearer AdminTestKey123' \\\n--data-raw
    '{\n    \"address\":\"0xWalletAddressHere\",\n    \"email\":\"billAndTed@universe.com\",\n
    \   \"signupsite\":\"app.yoursite.xyz\",\n    \"domain\":\"yoursite.xyz\",\n    \"name\":\"CyberTed\"\n}'\n```"
  title: WalletChat API
  version: "2.0"
paths:
  /signin:
    post:
      consumes:
      - application/json
      description: |-
        Every call the to API after this signin should present the JWT Bearer token for authenticated access.
        Upon request we can change the timeout to greater than 24 hours, or setup an addtional dedicated API for
        an agreed upon development and maintenance cost
      parameters:
      - description: json input containing signed message and append nonce for easy
          processing
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/auth.SigninPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Sign In with signed nonce value, currently JWT token returned should
        be valid for 24 hours
      tags:
      - Auth
  /users/{address}/nonce:
    get:
      consumes:
      - application/json
      description: |-
        As part of the login process, we need a user to sign a nonce genrated from the API, to prove the user in fact
        the owner of the wallet they are siging in from.  JWT currently set to 24 hour validity (could change this upon request)
      parameters:
      - description: wallet address to get nonce to sign
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
      summary: If the current wallet doesn't have a valid local JWT, need to request
        a new nonce to sign
      tags:
      - Auth
  /v1/community:
    post:
      consumes:
      - application/json
      description: Community Chat Data
      parameters:
      - description: Community Message Chat Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Groupchatitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Groupchatitem'
            type: array
      security:
      - BearerAuth: []
      summary: CreateCommunityChatitem creates GroupChatitem just with community tag
        (likely could be consolidated)
      tags:
      - GroupChat
  /v1/community/{community}/{address}:
    get:
      consumes:
      - application/json
      description: 'TODO: need a creation API for communities, which includes specificied
        welcome message text, Twitter handle, page title'
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.LandingPageItems'
            type: array
      security:
      - BearerAuth: []
      summary: Get Community Chat Landing Page Info
      tags:
      - GroupChat
  /v1/community/conditions:
    post:
      consumes:
      - application/json
      description: Change community access conditions
      parameters:
      - description: Create/Edit Community/Group Access Conditions
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Communityaccesscondition'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Communityaccesscondition'
            type: array
      security:
      - BearerAuth: []
      summary: Change community access conditions
      tags:
      - GroupChat
  /v1/create_bookmark:
    post:
      consumes:
      - application/json
      description: Bookmarks keep an NFT/Community group chat in the sidebar
      parameters:
      - description: Add Bookmark from Community Group Chat
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Bookmarkitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Bookmarkitem'
            type: array
      security:
      - BearerAuth: []
      summary: Join an NFT or Community group chat
      tags:
      - GroupChat
  /v1/create_chatitem:
    post:
      consumes:
      - application/json
      description: |-
        For DMs, Chatitem data struct is used to store each message and associated info.
        REQUIRED: fromaddr, toaddr, message (see data struct section at bottom of page for more detailed info on each paramter)
        Other fields are generally filled in by the backed REST API and used as return parameters
        ID is auto generated and should never be used as input.
      parameters:
      - description: Direct Message Chat Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Chatitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Create/Insert DM Chat Message (1-to-1 messaging)
      tags:
      - DMs
  /v1/create_comments:
    post:
      consumes:
      - application/json
      description: Comments are meant to be public, someday having an up/downvote
        method for auto-moderation
      parameters:
      - description: create struct
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Comments'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Comments'
            type: array
      security:
      - BearerAuth: []
      summary: Comments are used within an NFT community chat
      tags:
      - NFT
  /v1/create_community:
    post:
      consumes:
      - application/json
      description: Community Chat Creation
      parameters:
      - description: Community/Group Creation
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Createcommunityitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Createcommunityitem'
            type: array
      security:
      - BearerAuth: []
      summary: CreateCommunity creates new custom community chat
      tags:
      - GroupChat
  /v1/create_groupchatitem:
    post:
      consumes:
      - application/json
      description: Currently used for NFT Gated Chats
      parameters:
      - description: NFT Group Message Chat Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Groupchatitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Groupchatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Create/Insert chat message for NFT Group Messaging
      tags:
      - GroupChat
  /v1/delete_bookmark:
    post:
      consumes:
      - application/json
      description: Bookmarks keep an NFT/Community group chat in the sidebar
      parameters:
      - description: Remove Bookmark from Community Group Chat
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Bookmarkitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Bookmarkitem'
            type: array
      security:
      - BearerAuth: []
      summary: Leave an NFT or Community group chat
      tags:
      - GroupChat
  /v1/delete_chatitem/{id}:
    delete:
      consumes:
      - application/json
      description: Can only delete messages sent, cannot delete incoming messages
      parameters:
      - description: message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Single Chat Item (DM)
      tags:
      - Unused/Legacy
  /v1/delete_comments/{fromaddr}/{nftaddr}/{nftid}:
    delete:
      consumes:
      - application/json
      description: NFTs have a public comment section
      parameters:
      - description: FROM Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Public Comments for given FROM wallet address, NFT Contract
        and ID
      tags:
      - NFT
  /v1/delete_settings/{address}:
    delete:
      consumes:
      - application/json
      description: 'TODO: not yet used'
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete Settings Info
      tags:
      - Unused/Legacy
  /v1/deleteall_chatitems/{fromaddr}/{toaddr}:
    delete:
      consumes:
      - application/json
      description: Currently deletes all chat items between these two addresses
      parameters:
      - description: 'TO: Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Address'
        in: path
        name: fromaddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete All Chat Items (DMs) between FROM and TO given addresses
      tags:
      - Unused/Legacy
  /v1/get_bookmarks/{address}/:
    get:
      consumes:
      - application/json
      description: This used for UI purposes, checking if a user/wallet has bookmarked
        a community.
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Bookmarkitem'
            type: array
      security:
      - BearerAuth: []
      summary: Check if a wallet address has bookmarked/joined given NFT contract
      tags:
      - GroupChat
  /v1/get_bookmarks/{walletaddr}/{nftaddr}:
    get:
      consumes:
      - application/json
      description: This used for UI purposes, checking if a user/wallet has bookmarked
        a community.
      parameters:
      - description: Wallet Address
        in: path
        name: walletaddr
        required: true
        type: string
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
      security:
      - BearerAuth: []
      summary: Check if a wallet address has bookmarked/joined given NFT contract
      tags:
      - GroupChat
  /v1/get_comments/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: NFTs have a public comment section
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Comments'
            type: array
      security:
      - BearerAuth: []
      summary: Get Public Comments for given NFT Contract and ID
      tags:
      - NFT
  /v1/get_comments_cnt/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: NFTs have a public comment section
      parameters:
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: Get Public Comments Count for given NFT Contract and ID
      tags:
      - NFT
  /v1/get_groupchatitems/{address}/{useraddress}:
    get:
      consumes:
      - application/json
      description: 'Get all group chat items for a given wallet (useraddress) for
        a given NFT Contract Address (TODO: fix up var names)'
      parameters:
      - description: NFT Address
        in: path
        name: address
        required: true
        type: string
      - description: 'FROM: wallet address'
        in: path
        name: useraddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Groupchatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get group chat items, given a wallt FROM address and NFT Contract Address
      tags:
      - NFT
  /v1/get_groupchatitems_unreadcnt/{address}/{useraddress}:
    get:
      consumes:
      - application/json
      description: |-
        For group chat unread counts, currently the database stores a timestamp for each time a user enters a group chat.
        We though in the design it would be impractical to keep a read/unread count copy per user per message, but if this
        method doesn't proof to be fine grained enough, we could add a boolean relational table of read messgages per user.
      parameters:
      - description: Common Name Mapped to User/Community
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: 'Get Unread Groupchat Items (TODO: cleanup naming convention here)'
      tags:
      - Common
  /v1/get_inbox/{address}:
    get:
      consumes:
      - application/json
      description: Get Each 1-on-1 Conversation, NFT and Community Chat For Display
        in Inbox
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatiteminbox'
            type: array
      security:
      - BearerAuth: []
      summary: Get Inbox Summary With Last Message
      tags:
      - Inbox
  /v1/get_latest_unread/{address}:
    get:
      responses: {}
  /v1/get_n_chatitems/{fromaddr}/{toaddr}/{count}:
    get:
      responses: {}
  /v1/get_referral_code:
    get:
      consumes:
      - application/json
      description: Get Each 1-on-1 Conversation, NFT and Community Chat For Display
        in Inbox
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatiteminbox'
            type: array
      security:
      - BearerAuth: []
      summary: Get Inbox Summary With Last Message
      tags:
      - Inbox
  /v1/get_settings/{address}:
    get:
      consumes:
      - application/json
      description: 'TODO: not yet used'
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Settings'
            type: array
      security:
      - BearerAuth: []
      summary: Get Settings Info
      tags:
      - Unused/Legacy
  /v1/get_unread_cnt/{address}:
    get:
      consumes:
      - application/json
      description: Get Each 1-on-1 Conversation, NFT and Community Chat For Display
        in Inbox
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: Get all unread messages TO a specific user, used for total count notification
        at top notification bar
      tags:
      - Inbox
  /v1/get_unread_cnt/{address}/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get Unread count for specifc NFT context given a wallet address
        and specific NFT
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: Get all unread messages for a specific NFT context
      tags:
      - NFT
  /v1/get_unread_cnt/{fromaddr}/{toaddr}:
    get:
      consumes:
      - application/json
      description: Get Unread count for DMs
      parameters:
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: Get all unread messages between two addresses
      tags:
      - Unused/Legacy
  /v1/get_unread_cnt_by_type/{address}/{type}:
    get:
      consumes:
      - application/json
      description: Get Each 1-on-1 Conversation, NFT and Community Chat For Display
        in Inbox
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: Message Type - nft|community|dm|all
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: Get all unread messages TO a specific user, used for total count notification
        at top notification bar
      tags:
      - Unused/Legacy
  /v1/get_unread_cnt_nft/{address}:
    get:
      consumes:
      - application/json
      description: Get Unread count for all NFT contexts given a wallet address
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: Get all unread messages for all NFT related chats for given user
      tags:
      - Unused/Legacy
  /v1/getall_chatitems/{address}:
    get:
      consumes:
      - application/json
      description: Get all Chat Items for DMs for a given wallet address
      parameters:
      - description: Wallet Address
        in: path
        name: toaddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get Chat Item For Given Wallet Address
      tags:
      - Unused/Legacy
  /v1/getall_chatitems/{fromaddr}/{toaddr}:
    get:
      consumes:
      - application/json
      description: Get chat data between the given two addresses, TO and FROM and
        interchangable here
      parameters:
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get Chat Data Between Two Addresses
      tags:
      - DMs
  /v1/getall_chatitems/{fromaddr}/{toaddr}/${time}:
    get:
      consumes:
      - application/json
      description: Get chat data between the given two addresses, TO and FROM and
        interchangable here
      parameters:
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      - description: Load only messages after this time
        in: path
        name: time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get Chat Data Between Two Addresses
      tags:
      - DMs
  /v1/getnft_chatitems/{address}:
    get:
      consumes:
      - application/json
      description: Get ALL NFT context items for a given wallet address
      parameters:
      - description: Wallet Address
        in: path
        name: toaddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get NFT Related Chat Items For Given Wallet Address
      tags:
      - Unused/Legacy
  /v1/getnft_chatitems/{address}/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get all specified NFT contract and ID items for a given wallet
        address
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get NFT Related Chat Items For Given NFT Contract and ID, relating
        to one wallet
      tags:
      - Unused/Legacy
  /v1/getnft_chatitems/{fromaddr}/{toaddr}/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get ALL NFT context items for a specifc NFT context convo between
        two wallets
      parameters:
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get NFT Related Chat Items For Given NFT Contract and ID, between two
        wallet addresses (TO and FROM are interchangable)
      tags:
      - NFT
  /v1/getnft_chatitems/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get ALL NFT context items for a given wallet address
      parameters:
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get NFT Related Chat Items For Given NFT Contract and ID
      tags:
      - Unused/Legacy
  /v1/getread_chatitems/{fromaddr}/{toaddr}:
    get:
      consumes:
      - application/json
      description: Get newly read messages to update READ status for lazy loading
      parameters:
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get Recently Read Messages
      tags:
      - DMs
  /v1/image:
    post:
      consumes:
      - application/json
      description: Currently used for the WC HQ Logo, stores the base64 raw data of
        the profile image for a community
      parameters:
      - description: Profile Thumbnail Pic
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Imageitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Imageitem'
            type: array
      security:
      - BearerAuth: []
      summary: Store Image in DB for later user
      tags:
      - Common
    put:
      consumes:
      - application/json
      description: Currently used for the WC HQ Logo, stores the base64 raw data of
        the profile image for a community
      parameters:
      - description: Profile Thumbnail Pic
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Imageitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Bookmarkitem'
            type: array
      security:
      - BearerAuth: []
      summary: Store Image in DB for later user (update existing photo)
      tags:
      - Common
  /v1/image/{addr}:
    get:
      consumes:
      - application/json
      description: Retreive image data for use with user/community/nft group dislayed
        icon
      parameters:
      - description: Wallet/NFT Address Mapped to User/Community
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Imageitem'
            type: array
      security:
      - BearerAuth: []
      summary: Get Thumbnail Image Data
      tags:
      - Common
  /v1/imageraw:
    post:
      consumes:
      - application/json
      description: |-
        private image storage for photo uploads in DMS
        imageid should follow format: <fromAddr>_<toAddr>_<random 10 digit number>
        the random number is passed in instead of returned, to make it easier for the FE to save this in message data
      parameters:
      - description: Raw Images
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.ImageitemPhoto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      summary: Store Image in Bucket Storage
      tags:
      - DMs
  /v1/imageraw/{imageid}:
    get:
      consumes:
      - application/json
      description: |-
        private image storage for photo uploads in DMs
        Images can only be fetched by address to (recipient), or address from (sender)
      parameters:
      - description: unique image id to fetch
        in: path
        name: imageid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Imageitem'
            type: array
      security:
      - BearerAuth: []
      summary: Store Image in Bucket Storage
      tags:
      - DMs
  /v1/is_owner/{contract}/{wallet}:
    get:
      consumes:
      - application/json
      description: API user could check this directly via any third party service
        like NFTPort, Moralis as well
      parameters:
      - description: NFT Contract Address
        in: path
        name: contract
        required: true
        type: string
      - description: Wallet Address
        in: path
        name: wallet
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.LandingPageItems'
            type: array
      security:
      - BearerAuth: []
      summary: Check if given wallet address owns an NFT from given contract address
      tags:
      - Common
  /v1/name:
    post:
      consumes:
      - application/json
      description: |-
        Give a common name (Kevin.eth, BillyTheKid, etc) to an Address
        Accepts ADMIN_API_KEY for integrated sign-in
      parameters:
      - description: Address and Name to map together
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Addrnamesignupitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: give a common name to a user address, or NFT collection
      tags:
      - Common
  /v1/name/{addr}:
    get:
      consumes:
      - application/json
      description: get the given a common name (Kevin.eth, BillyTheKid, etc) what
        has already been mapped to an Address
      parameters:
      - description: Get Name for given address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Addrnameitem'
            type: array
      security:
      - BearerAuth: []
      summary: get the common name which has been mapped to an address
      tags:
      - Common
  /v1/resolve_name/{name}:
    get:
      consumes:
      - application/json
      description: Resolve .ETH, .BNB, .ARB names
      parameters:
      - description: ENS/BNB/ARB/TEZ/NEAR/BTC Name
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Settings'
            type: array
      security:
      - BearerAuth: []
      summary: Generic Resolve Name Service
      tags:
      - ""
  /v1/unreadcount/{address}:
    get:
      consumes:
      - application/json
      description: Get Unread count just given an address
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      security:
      - BearerAuth: []
      summary: Get all unread messages TO a specific user, used for total count notification
        at top notification bar
      tags:
      - Inbox
  /v1/update_chatitem/{fromaddr}/{toaddr}:
    put:
      consumes:
      - application/json
      description: |-
        Currently this only update the message read/unread status.  It could update the entire JSON struct
        upon request, however we only needed this functionality currently and it saved re-encryption of the data.
        TODO: TO/FROM address in the URL is not needed/not used anymore.
      parameters:
      - description: chat item JSON struct to update msg read status
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Chatitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      security:
      - BearerAuth: []
      summary: Update Message Read Status of a given DM chat message
      tags:
      - DMs
  /v1/update_community:
    post:
      consumes:
      - application/json
      description: Community Chat Update - input slug, and any updates to Name, Socials
      parameters:
      - description: Community/Group Update
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Createcommunityitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Createcommunityitem'
            type: array
      security:
      - BearerAuth: []
      summary: UpdateCommunity updates  custom community chat
      tags:
      - GroupChat
  /v1/update_settings:
    post:
      consumes:
      - application/json
      description: Update settings, email address, daily notifications and per DM
        notifications
      parameters:
      - description: update struct
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Settings'
            type: array
      security:
      - BearerAuth: []
      summary: Settings hold a user address and the email address for notifications
        if they opt-in
      tags:
      - Common
  /v1/verify_email/{email}/{verification_code}:
    get:
      consumes:
      - application/json
      description: Users will get an email when signing-up to verify email, to ensure
        we do not send spam
      parameters:
      - description: update struct
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Settings'
            type: array
      security:
      - BearerAuth: []
      summary: Link a user can click in email to verify email address, will have unique
        code
      tags:
      - Common
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
